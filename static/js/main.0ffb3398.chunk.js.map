{"version":3,"sources":["components/CreateAccount.js","components/LogIn.js","components/Student.js","App.js","serviceWorker.js","index.js"],"names":["CreateAccount","state","username","password","confirmPassword","name","instrument","location","handleChange","event","setState","target","id","value","handleCreateAccount","preventDefault","alert","fetch","method","headers","body","JSON","stringify","user","then","response","json","console","log","onSubmit","this","type","onChange","placeholder","Component","cookies","Cookies","get","LogIn","handleSubmitLogIn","set","path","token","props","getCurrentUser","handleLogIn","credentialError","history","push","catch","error","Container","textalign","Form","FormGroup","Label","for","Input","to","Student","loggedIn","handleCompletedChange","assignment_id","checked","completed","forceUpdate","logOut","handleLogOut","currentUser","style","textAlign","onClick","userAssignments","map","assignment","i","key","date","content","handleDeleteUser","App","undefined","assignments","user_id","checkCurrentUser","remove","getAssignments","assignmentData","singleUserAssignments","Jumbotron","fluid","exact","render","routeProps","baseURL","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ffb3398.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass CreateAccount extends Component {\n\n  state = {\n    username: '',\n    password: '',\n    confirmPassword: '',\n    name: '',\n    instrument: '',\n    location: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n  handleCreateAccount = (event) => {\n    event.preventDefault()\n    const { password, confirmPassword } = this.state\n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match, please try again\")\n    } else {\n      fetch('/users', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        body:\n          JSON.stringify({\n            user: {\n              username: this.state.username,\n              password: this.state.password,\n              name: this.state.name,\n              instrument: this.state.instrument,\n              location: this.state.location\n            }\n          })\n      })\n        .then(response => response.json())\n        .then(json => {console.log(json)})\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h2>Create Account</h2>\n        <form onSubmit={this.handleCreateAccount}>\n          <label>\n            <input\n              type=\"text\"\n              id=\"username\"\n              name=\"username\"\n              onChange={this.handleChange}\n              value={this.state.username}\n              placeholder=\"Username\"\n            />\n          </label>\n          <br/>\n          <label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              onChange={this.handleChange}\n              value={this.state.password}\n              placeholder=\"Password\"\n            />\n          </label>\n          <br/>\n          <label>\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              onChange={this.handleChange}\n              value={this.state.confirmPassword}\n              placeholder=\"Confirm Password\"\n            />\n          </label>\n          <br/>\n          <label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              onChange={this.handleChange}\n              value={this.state.name}\n              placeholder=\"Name\"\n            />\n          </label>\n          <br/>\n          <label>\n            Instrument:\n            <select\n              id=\"instrument\"\n              value={this.state.instrument}\n              onChange={this.handleChange}\n            >\n              <option value=\"\"></option>\n              <option value=\"guitar\">Guitar</option>\n              <option value=\"bass\">Bass</option>\n              <option value=\"drums\">Drums</option>\n              <option value=\"piano\">Piano</option>\n            </select>\n          </label>\n          <br/>\n          <label>\n            Location:\n            <select\n              id=\"location\"\n              value={this.state.location}\n              onChange={this.handleChange}\n            >\n              <option value=\"\"></option>\n              <option value=\"altus\">Altus</option>\n              <option value=\"quanah\">Quanah</option>\n              <option value=\"vernon\">Vernon</option>\n            </select>\n          </label>\n          <br/>\n          <input type=\"submit\" value=\"Create Account\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default CreateAccount\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport {\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText\n} from 'reactstrap'\n\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nlet user = cookies.get('user')\n\nclass LogIn extends Component {\n\n  state = {\n    username: '',\n    password: ''\n  }\n\n  componentDidMount() {\n    if (user) {\n      this.props.history.push('/student')\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n  handleSubmitLogIn = (event) => {\n    event.preventDefault();\n    fetch('/users/login', {\n      body:\n        JSON.stringify({\n          user: {\n            username: this.state.username,\n            password: this.state.password\n          }\n        }),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then(json => {\n        if (json.user) {\n          cookies.set('user', json.user.id, { path: '/' })\n          cookies.set('token', json.token, { path: '/' })\n          this.props.getCurrentUser(json.user.id)\n\n          this.props.handleLogIn()\n          this.setState({\n            username: '',\n            password: '',\n            credentialError: false\n          })\n    this.props.history.push('/student')\n\n        } else {\n          this.setState({\n            password: '',\n            credentialError: true\n          })\n        }\n      }\n      )\n      .catch(error => console.log(error))\n  }\n\n  render() {\n    return (\n      <div>\n      <Container>\n        <h4 textalign='center'>Sign In</h4>\n        <Form onSubmit={this.handleSubmitLogIn}>\n          <FormGroup>\n            <Label for=\"username\"></Label>\n              <Input\n                type='text'\n                name='username'\n                id='username'\n                onChange={this.handleChange}\n                value={this.state.username}\n                placeholder='Username'\n              />\n            <Label for=\"password\"></Label>\n              <Input\n                type='password'\n                name='password'\n                id='password'\n                onChange={this.handleChange}\n                value={this.state.password}\n                placeholder='Password'\n              />\n\n            <Input\n              type='submit'\n              value='Sign In'\n            />\n            <br/>\n            <h4>\n              <Link to='/createaccount'>Create Account</Link>\n            </h4>\n          </FormGroup>\n        </Form>\n        {\n          this.state.credentialError ?\n          <h2>Username or Password Incorrect</h2> :\n          null\n        }\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default LogIn\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom'\nimport {\n  Container,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText\n} from 'reactstrap'\nimport Cookies from 'universal-cookie'\n\nconst cookies = new Cookies()\nlet user = cookies.get('user')\n\nclass Student extends Component {\n\n  state = {\n    loggedIn: false,\n  }\n\n  handleCompletedChange = (event) => {\n    const assignment_id = event.target.id\n    console.log(event.target.checked)\n    fetch('/assignments/' + assignment_id, {\n      body: JSON.stringify({\n        completed:\n            event.target.checked ?\n            true :\n            false\n      }),\n      method: 'PATCH',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(this.forceUpdate())\n    .catch(error => console.log(error))\n  }\n\n  logOut = () => {\n    this.props.handleLogOut()\n    return <Redirect to='/' />\n  }\n\n  render() {\n    return(\n      <div>\n      <Container>\n        {this.props.currentUser ?\n          <>\n            <div style={{ textAlign: 'right' }}>\n              <h4>\n                user {this.props.currentUser.username}\n              </h4>\n\n              <button onClick={ this.logOut }>\n                Sign Out\n              </button>\n            </div>\n            <table>\n              <tbody>\n                <tr>\n                  <th>Name: </th>\n                  <td>{this.props.currentUser.name}</td>\n                </tr>\n                <tr>\n                  <th>Instrument: </th>\n                  <td>{this.props.currentUser.instrument}</td>\n                </tr>\n                <tr>\n                  <th>Location: </th>\n                  <td>{this.props.currentUser.location}</td>\n                </tr>\n              </tbody>\n            </table>\n            <b>Assignments: </b>\n            <br/>\n            <br/>\n            {this.props.userAssignments.map((assignment, i) => (\n              <div key={i}>\n                <h6>Date: {assignment.date}</h6>\n                <h6>Assignment: {assignment.content}</h6>\n                <h6>Completed:\n                  <form>\n                    <input\n                      type=\"checkbox\"\n                      name=\"completed\"\n                      id={assignment.id}\n\n                      checked={\n                        assignment.completed\n                      }\n                      onChange={this.handleCompletedChange}\n                      />\n                  </form>\n                {assignment.completed}</h6>\n              </div>\n            ))}\n            <br/>\n            <br/>\n            <br/>\n            <button onClick={ () => this.props.handleDeleteUser(user) }>\n              Delete Account\n            </button>\n            <br/>\n            <br/>\n          </>\n          :\n          <>\n            <h5>\n              <Link to='/'>Click here to Sign In</Link>\n            </h5>\n          </>\n        }\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default Student\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport {\n        Jumbotron,\n        Container } from 'reactstrap'\nimport Cookies from 'universal-cookie'\n\nimport CreateAccount from './components/CreateAccount.js'\nimport LogIn from './components/LogIn.js'\nimport Student from './components/Student.js'\n\n\n\nimport './App.css';\n\nconst baseURL = 'http://localhost:3000'\nconst cookies = new Cookies()\nlet token = cookies.get('token')\nlet user = cookies.get('user')\n\nclass App extends Component {\n\n  state = {\n    currentUser: undefined,\n    loggedIn: false,\n    assignments: [],\n    userAssignments: []\n    }\n\n  componentDidMount() {\n    // this.getStudents()\n    this.getAssignments()\n    // this.getCurrentUser()\n    this.checkCurrentUser()\n  }\n\n  // getStudents () {\n  //   fetch('/users')\n  //     .then(response => response.json())\n  //     .then(json => console.log(json))\n  //     .catch(error => console.error(error))\n  // }\n  //\n\n  getAssignments () {\n    let assignmentData = {\n      singleUserAssignments: []\n    }\n    fetch('/assignments')\n      .then(response => response.json())\n      .then(json => {\n        json.map((assignment) => {\n          if(assignment.user_id == user) {\n            assignmentData.singleUserAssignments.push(assignment)\n          }\n        })\n      })\n      .then(this.setState({userAssignments: assignmentData.singleUserAssignments}))\n      .catch(error => console.error(error))\n  }\n\n  handleLogIn = () => {\n    console.log(\"handle log in ran\")\n    this.setState({loggedIn: true})\n  }\n\n  getCurrentUser = (user_id) => {\n    fetch('/users/' + user_id, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    })\n    .then(response => response.json())\n    .then(json => {\n      this.setState({currentUser: json})\n    })\n    .then( () => {\n      this.handleLogIn()\n    })\n  }\n\n  checkCurrentUser = () => {\n    if (user) {\n      this.getCurrentUser(user)\n    }\n  }\n\n  handleLogOut = () => {\n    cookies.remove('token')\n    cookies.remove('user')\n    this.setState({loggedIn: false})\n  }\n\n  handleDeleteUser = (user_id) => {\n    fetch('/users/' + user_id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    })\n    .then(this.handleLogOut)\n    .catch(error => console.log(error))\n  }\n\n  render() {\n    return (\n      <>\n        <Router>\n          <div>\n            <Jumbotron fluid>\n              <Container fluid>\n                <h1>Stephen Gilbert Musical Instruction</h1>\n                <p>Student Portal</p>\n              </Container>\n            </Jumbotron>\n\n            <Route exact\n              path='/'\n              render={(routeProps) => (\n                <LogIn\n                  {...routeProps}\n                  baseURL={baseURL}\n                  handleLogIn={this.handleLogIn}\n                  getCurrentUser={this.getCurrentUser}\n                  currentUser={this.state.currentUser}\n                />\n              )}\n            />\n\n            <Route\n              path='/student'\n              render={(routeProps) => (\n                <Student\n                  {...routeProps}\n                  loggedIn={this.state.loggedIn}\n                  currentUser={this.state.currentUser}\n                  getCurrentUser={this.getCurrentUser}\n                  userAssignments={this.state.userAssignments}\n                  handleLogOut={this.handleLogOut}\n                  handleDeleteUser={this.handleDeleteUser}\n                />\n              )}\n            />\n\n            <Route\n              path='/createaccount'\n              render={(routeProps) => (\n                <CreateAccount\n                  baseURL={baseURL}\n                />\n              )}\n            />\n          </div>\n        </Router>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}