{"version":3,"sources":["constants.js","components/CreateAccount.js","components/LogIn.js","components/Student.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","baseURL","CreateAccount","state","username","password","confirmPassword","name","instrument","location","handleChange","event","setState","target","id","value","handleCreateAccount","preventDefault","alert","fetch","method","headers","body","JSON","stringify","user","then","props","history","push","onSubmit","this","type","onChange","placeholder","Component","cookies","Cookies","get","LogIn","handleSubmitLogIn","response","json","set","path","token","handleLogIn","credentialError","catch","error","console","log","Container","textalign","Form","FormGroup","Label","for","Input","to","Student","loggedIn","handleCompletedChange","assignment_id","checked","completed","forceUpdate","logOut","handleLogOut","currentUser","style","textAlign","onClick","userAssignments","map","assignment","i","key","date","content","handleDeleteUser","App","undefined","assignments","toggleLoggedIn","getAssignments","getCurrentUser","user_id","checkCurrentUser","remove","assignmentData","singleUserAssignments","Jumbotron","fluid","exact","render","routeProps","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55de1145.chunk.js","sourcesContent":["const BASE_URL = 'https://music-student-management-api.herokuapp.com'\n// const BASE_URL = 'http://localhost:3000'\n\nexport { BASE_URL }\n","import React, { Component } from 'react'\n\nimport { BASE_URL } from '../constants.js'\n\nconst baseURL = BASE_URL\n\nclass CreateAccount extends Component {\n\n  state = {\n    username: '',\n    password: '',\n    confirmPassword: '',\n    name: '',\n    instrument: '',\n    location: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n  handleCreateAccount = (event) => {\n    event.preventDefault()\n    const { password, confirmPassword } = this.state\n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match, please try again\")\n    } else {\n      fetch(baseURL + '/users', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        body:\n          JSON.stringify({\n            user: {\n              username: this.state.username,\n              password: this.state.password,\n              name: this.state.name,\n              instrument: this.state.instrument,\n              location: this.state.location\n            }\n          })\n      })\n        .then( () => this.props.history.push('/'))\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h2>Create Account</h2>\n        <form onSubmit={this.handleCreateAccount}>\n          <label>\n            <input\n              type=\"text\"\n              id=\"username\"\n              name=\"username\"\n              onChange={this.handleChange}\n              value={this.state.username}\n              placeholder=\"Username\"\n            />\n          </label>\n          <br/>\n          <label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              onChange={this.handleChange}\n              value={this.state.password}\n              placeholder=\"Password\"\n            />\n          </label>\n          <br/>\n          <label>\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              onChange={this.handleChange}\n              value={this.state.confirmPassword}\n              placeholder=\"Confirm Password\"\n            />\n          </label>\n          <br/>\n          <label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              onChange={this.handleChange}\n              value={this.state.name}\n              placeholder=\"Name\"\n            />\n          </label>\n          <br/>\n          <label>\n            Instrument:\n            <select\n              id=\"instrument\"\n              value={this.state.instrument}\n              onChange={this.handleChange}\n            >\n              <option value=\"\"></option>\n              <option value=\"guitar\">Guitar</option>\n              <option value=\"bass\">Bass</option>\n              <option value=\"drums\">Drums</option>\n              <option value=\"piano\">Piano</option>\n            </select>\n          </label>\n          <br/>\n          <label>\n            Location:\n            <select\n              id=\"location\"\n              value={this.state.location}\n              onChange={this.handleChange}\n            >\n              <option value=\"\"></option>\n              <option value=\"altus\">Altus</option>\n              <option value=\"quanah\">Quanah</option>\n              <option value=\"vernon\">Vernon</option>\n            </select>\n          </label>\n          <br/>\n          <input type=\"submit\" value=\"Create Account\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default CreateAccount\n","import React, { Component } from 'react'\nimport { HashRouter, Route, Link } from 'react-router-dom'\nimport {\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from 'reactstrap'\n\nimport Cookies from 'universal-cookie'\n\nimport { BASE_URL } from '../constants.js'\n\nconst baseURL = BASE_URL\nconst cookies = new Cookies()\n\nlet user = cookies.get('user')\n\nclass LogIn extends Component {\n\n  state = {\n    username: '',\n    password: ''\n  }\n\n  componentDidMount() {\n    if (user) {\n      this.props.history.push('/student')\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.id]: event.target.value})\n  }\n\n  handleSubmitLogIn = (event) => {\n    event.preventDefault();\n    fetch(baseURL + '/users/login', {\n      body:\n        JSON.stringify({\n          user: {\n            username: this.state.username,\n            password: this.state.password\n          }\n        }),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then(json => {\n        if (json.user) {\n          cookies.set('user', json.user.id, { path: '/' })\n          cookies.set('token', json.token, { path: '/' })\n\n          this.props.handleLogIn()\n\n          this.setState({\n            username: '',\n            password: '',\n            credentialError: false\n          })\n          this.props.history.push('/student')\n\n        } else {\n          this.setState({\n            password: '',\n            credentialError: true\n          })\n        }\n      }\n      )\n      .catch(error => console.log(error))\n  }\n\n  render() {\n    return (\n      <div>\n      <Container>\n        <h4 textalign='center'>Sign In</h4>\n        <Form onSubmit={this.handleSubmitLogIn}>\n          <FormGroup>\n            <Label for=\"username\"></Label>\n              <Input\n                type='text'\n                name='username'\n                id='username'\n                onChange={this.handleChange}\n                value={this.state.username}\n                placeholder='Username'\n              />\n            <Label for=\"password\"></Label>\n              <Input\n                type='password'\n                name='password'\n                id='password'\n                onChange={this.handleChange}\n                value={this.state.password}\n                placeholder='Password'\n              />\n\n            <Input\n              type='submit'\n              value='Sign In'\n            />\n            <br/>\n            <h4>\n              <Link to='/createaccount'>Create Account</Link>\n            </h4>\n          </FormGroup>\n        </Form>\n        {\n          this.state.credentialError ?\n          <h2>Username or Password Incorrect</h2> :\n          null\n        }\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default LogIn\n","import React, { Component } from 'react'\nimport { HashRouter, Route, Link, Redirect } from 'react-router-dom'\nimport {\n  Container\n} from 'reactstrap'\nimport Cookies from 'universal-cookie'\n\nimport { BASE_URL } from '../constants.js'\n\nconst baseURL = BASE_URL\nconst cookies = new Cookies()\nlet user = cookies.get('user')\n\nclass Student extends Component {\n\n  state = {\n    loggedIn: false,\n  }\n\n  handleCompletedChange = (event) => {\n    const assignment_id = event.target.id\n    console.log(event.target.checked)\n    fetch(baseURL + '/assignments/' + assignment_id, {\n      body: JSON.stringify({\n        completed:\n            event.target.checked ?\n            true :\n            false\n      }),\n      method: 'PATCH',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(this.forceUpdate())\n    .catch(error => console.log(error))\n  }\n\n  logOut = () => {\n    this.setState({loggedIn: false})\n    this.props.handleLogOut()\n    return <Redirect to='/' />\n  }\n\n  render() {\n    return(\n      <div>\n      <Container>\n        {this.props.currentUser ?\n          <>\n            <div style={{ textAlign: 'right' }}>\n              <h4>\n                user {this.props.currentUser.username}\n              </h4>\n\n              <button onClick={ this.logOut }>\n                Sign Out\n              </button>\n            </div>\n            <table>\n              <tbody>\n                <tr>\n                  <th>Name: </th>\n                  <td>{this.props.currentUser.name}</td>\n                </tr>\n                <tr>\n                  <th>Instrument: </th>\n                  <td>{this.props.currentUser.instrument}</td>\n                </tr>\n                <tr>\n                  <th>Location: </th>\n                  <td>{this.props.currentUser.location}</td>\n                </tr>\n              </tbody>\n            </table>\n            <b>Assignments: </b>\n            <br/>\n            <br/>\n            {this.props.userAssignments.map((assignment, i) => (\n              <div key={i}>\n                <h6>Date: {assignment.date}</h6>\n                <h6>Assignment: {assignment.content}</h6>\n                <h6>Completed:\n                  <form>\n                    <input\n                      type=\"checkbox\"\n                      name=\"completed\"\n                      id={assignment.id}\n\n                      checked={\n                        assignment.completed\n                      }\n                      onChange={this.handleCompletedChange}\n                      />\n                  </form>\n                {assignment.completed}</h6>\n              </div>\n            ))}\n            <br/>\n            <br/>\n            <br/>\n            <button onClick={ () => this.props.handleDeleteUser(user) }>\n              Delete Account\n            </button>\n            <br/>\n            <br/>\n          </>\n          :\n          <>\n            <h5>\n              <Link to='/'>Click here to Sign In</Link>\n            </h5>\n          </>\n        }\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default Student\n","import React, { Component } from 'react'\nimport { HashRouter, Route } from 'react-router-dom'\nimport {\n        Jumbotron,\n        Container } from 'reactstrap'\nimport Cookies from 'universal-cookie'\nimport { BASE_URL } from './constants.js'\nimport CreateAccount from './components/CreateAccount.js'\nimport LogIn from './components/LogIn.js'\nimport Student from './components/Student.js'\n\n\n\nimport './App.css';\n\nconst baseURL = BASE_URL\nconst cookies = new Cookies()\nlet token = cookies.get('token')\nlet user = cookies.get('user')\n\nclass App extends Component {\n\n  state = {\n    currentUser: undefined,\n    loggedIn: false,\n    assignments: [],\n    userAssignments: []\n    }\n\n  componentDidMount() {\n    // this.getStudents()\n    // this.getAssignments()\n    // this.getCurrentUser()\n    // this.checkCurrentUser()\n  }\n\n  // getStudents () {\n  //   fetch('/users')\n  //     .then(response => response.json())\n  //     .then(json => console.log(json))\n  //     .catch(error => console.error(error))\n  // }\n  //\n\n  getAssignments () {\n    let assignmentData = {\n      singleUserAssignments: []\n    }\n    fetch(baseURL + '/assignments')\n      .then(response => response.json())\n      .then(json => {\n        json.map((assignment) => {\n          if(assignment.user_id == user) {\n            assignmentData.singleUserAssignments.push(assignment)\n          }\n        })\n      })\n      .then(this.setState({userAssignments: assignmentData.singleUserAssignments}))\n      .catch(error => console.error(error))\n  }\n\n  toggleLoggedIn = () => {\n    this.setState({\n      loggedIn: !this.state.loggedIn\n    })\n  }\n\n  handleLogIn = () => {\n    console.log(\"handleLogIn ran\")\n    this.toggleLoggedIn()\n    this.getAssignments()\n    this.getCurrentUser(this.user)\n  }\n\n  getCurrentUser = (user_id) => {\n    fetch(baseURL + '/users/' + user_id, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    })\n    .then(response => response.json())\n    .then(json => {\n      this.setState({currentUser: json})\n    })\n  }\n\n  checkCurrentUser = () => {\n    if (user) {\n      this.getCurrentUser(user)\n    }\n  }\n\n  handleLogOut = () => {\n    console.log(\"handleLogOut ran\")\n    cookies.remove('token', { path: '/' })\n    cookies.remove('user', { path: '/' })\n    this.setState({loggedIn: false})\n  }\n\n  handleDeleteUser = (user_id) => {\n    fetch(baseURL + '/users/' + user_id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    })\n    .then(this.handleLogOut)\n    .catch(error => console.log(error))\n  }\n\n  render() {\n    return (\n      <>\n        <HashRouter>\n          <div>\n            <Jumbotron fluid>\n              <Container fluid>\n                <h1>Stephen Gilbert Musical Instruction</h1>\n                <p>Student Portal</p>\n              </Container>\n            </Jumbotron>\n\n            <Route exact\n              path='/'\n              render={(routeProps) => (\n                <LogIn\n                  {...routeProps}\n                  baseURL={baseURL}\n                  handleLogIn={this.handleLogIn}\n                  getCurrentUser={this.getCurrentUser}\n                  currentUser={this.state.currentUser}\n                />\n              )}\n            />\n\n            <Route\n              path='/student'\n              render={(routeProps) => (\n                <Student\n                  {...routeProps}\n                  loggedIn={this.state.loggedIn}\n                  currentUser={this.state.currentUser}\n                  getCurrentUser={this.getCurrentUser}\n                  userAssignments={this.state.userAssignments}\n                  handleLogOut={this.handleLogOut}\n                  handleDeleteUser={this.handleDeleteUser}\n                />\n              )}\n            />\n\n            <Route\n              path='/createaccount'\n              render={(routeProps) => (\n                <CreateAccount\n                  {...routeProps}\n                  baseURL={baseURL}\n                />\n              )}\n            />\n          </div>\n        </HashRouter>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}